!function($, Foundation){
  'use strict';

  var keyCodes = {
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN'
  };

  // constants for easier comparing
  var keys = (function(kcs) {
    var k = {};
    for (var kc in kcs) k[kcs[kc]] = kcs[kc];
    return k;
  })(keyCodes);

  Foundation.keys = keys;

  /**
   * Parses the (keyboard) event and returns a String that represents its key
   * @param {Event} event - the event generated by the event handler
   * @return String key - String that represents the key pressed
   */
  var parseKey = function(event) {
    return keyCodes[event.which || event.keyCode];
  };
  Foundation.parseKey = parseKey;


  // plain commands per component go here, ltr and rtl are merged based on orientation
  var commands = {
    'Slider': {
        'ltr': {
          'ARROW_RIGHT': 'increase',
          'ARROW_UP': 'increase',
          'ARROW_DOWN': 'decrease',
          'ARROW_LEFT': 'decrease'
        },
        'rtl': {
          'ARROW_LEFT': 'increase',
          'ARROW_RIGHT': 'decrease'
        }
    },
    'Reveal': {
      'ENTER': 'open',
      'ESCAPE': 'close'
    }
  };



  /**
   * Handles the given (keyboard) event
   * @param {Event} event - the event generated by the event handler
   * @param {Object} component - Foundation component, e.g. Slider or Reveal
   * @param {Objects} functions - collection of functions that are to be executed
   */
  var handleKey = function(event, component, functions) {

    var commandList = commands[getComponentName(component)];
    if (!commandList) return console.warn('Component not defined!');
    var keyCode = parseKey(event);

    var cmds;
    if (typeof commandList.ltr === 'undefined') { // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
    } else { // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
        if (isRtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);
        else cmds = $.extend({}, commandList.rtl, commandList.ltr);        
    }
    
    var command = cmds[keyCode];

    var fn = functions[command];
    if (fn) {
        fn.apply(component);
    }
  };
  Foundation.handleKey = handleKey;

  /**
   * Returns the component name name
   * @param {Object} component - Foundation component, e.g. Slider or Reveal
   * @return String componentName
   */
  var getComponentName = function(component) {
    return (/function (.+)\(/).exec((component).constructor.toString())[1] || '';
  };

  /**
   * Checks if the document is rtl oriented, based on html-tag's dir-attribute
   * @return String orientation - either 'ltr' or 'rtl'
   */
  var isRtl = function() {
    return $('html').attr('dir') === 'rtl';
  };
}(jQuery, window.Foundation);
