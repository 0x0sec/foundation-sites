@import "util/value";

@include describe("Has Value") {
  @include it("returns false if the value is not falsey") {
    $boolean: hasvalue(true);
    $number:  hasvalue(1px);
    $color:   hasvalue(#000);
    $list:    hasvalue(1px solid black);
    
    @include should(expect($boolean), to(be(true)));
    @include should(expect($number), to(be(true)));
    @include should(expect($color), to(be(true)));
    @include should(expect($list), to(be(true)));
  }
  @include it("returns false if the value is falsey") {
    $zero:  hasvalue(0px);
    $null:  hasvalue(null);
    $none:  hasvalue(none);

    @include should(expect($zero), to(be(false)));
    @include should(expect($null), to(be(false)));
    @include should(expect($none), to(be(false)));
  }
}

@include describe("Get Side") {
  @include it("returns correct sides when given one side value") {
    $value: 1rem;
    $actual: (
      get-side($value, top),
      get-side($value, right),
      get-side($value, bottom),
      get-side($value, left),
    );
    $expected: (1rem, 1rem, 1rem, 1rem,);

    @include should(expect($actual), to(be($expected)));
  }
  @include it("returns correct sides when given two side values") {
    $value: 1rem 2rem;
    $actual: (
      get-side($value, top),
      get-side($value, right),
      get-side($value, bottom),
      get-side($value, left),
    );
    $expected: (1rem, 2rem, 1rem, 2rem,);

    @include should(expect($actual), to(be($expected)));
  }
  @include it("returns correct sides when given three side values") {
    $value: 1rem 2rem 3rem;
    $actual: (
      get-side($value, top),
      get-side($value, right),
      get-side($value, bottom),
      get-side($value, left),
    );
    $expected: (1rem, 2rem, 3rem, 2rem,);

    @include should(expect($actual), to(be($expected)));
  }
  @include it("returns correct sides when given four side values") {
    $value: 1rem 2rem 3rem 4rem;
    $actual: (
      get-side($value, top),
      get-side($value, right),
      get-side($value, bottom),
      get-side($value, left),
    );
    $expected: (1rem, 2rem, 3rem, 4rem,);

    @include should(expect($actual), to(be($expected)));
  }
}

@include describe("Get Border Value") {
  @include it("returns the right value of a border property") {
    $value: 10px dashed green;
    $width: get-border-value($value, width);
    $style: get-border-value($value, style);
    $color: get-border-value($value, color);

    @include should(expect($width), to(be(10px)));
    @include should(expect($style), to(be(dashed)));
    @include should(expect($color), to(be(green)));
  }
  @include it("returns a default value if a property is missing") {
    $defaultWidth: get-border-value(solid black, width);
    $defaultStyle: get-border-value(10px black, style);
    $defaultColor: get-border-value(10px solid, color);

    @include should(expect($defaultWidth), to(be(0)));
    @include should(expect($defaultStyle), to(be(solid)));
    @include should(expect($defaultColor), to(be(black)));
  }
}

@include describe("Get Shadow Value") {
  @include it("returns the right value of a shadow property") {
    $value:  inset 1px 2px 3px 4px black;
    $inset:  get-shadow-value($value, inset);
    $xValue: get-shadow-value($value, x);
    $yValue: get-shadow-value($value, y);
    $size:   get-shadow-value($value, size);
    $spread: get-shadow-value($value, spread);
    $color:  get-shadow-value($value, color);

    @include should(expect($inset), to(be(true)));
    @include should(expect($xValue), to(be(1px)));
    @include should(expect($yValue), to(be(2px)));
    @include should(expect($size), to(be(3px)));
    @include should(expect($spread), to(be(4px)));
    @include should(expect($color), to(be(black)));
  }
  @include it("returns a default value if a property is missing") {
    $noInset:  get-shadow-value(1px 2px 3px 4px black, inset);
    $noXValue: get-shadow-value(black, x);
    $noYValue: get-shadow-value(1px black, y);
    $noSize:   get-shadow-value(1px 2px black, size);
    $noSpread: get-shadow-value(1px 2px 3px black, spread);
    $noColor:  get-shadow-value(1px 2px, color);

    @include should(expect($noInset), to(be(false)));
    @include should(expect($noXValue), to(be(0)));
    @include should(expect($noYValue), to(be(0)));
    @include should(expect($noSize), to(be(0)));
    @include should(expect($noSpread), to(be(0)));
    @include should(expect($noColor), to(be(black)));
  }
}