// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group off-canvas
////

/// If `true`, the off-canvas menu is `position: fixed`. Otherwise, it's `position: absolute`.
/// @type Boolean
$offcanvas-fixed: false;

/// Width of an off-canvas menu.
/// @type Number
$offcanvas-width: 250px;

/// Background color of an off-canvas menu.
/// @type Color
$offcanvas-background: $white;

/// Z-index of an off-canvas menu.
/// @type Number
$offcanvas-zindex: -1;

/// Length of the animation on an off-canvas menu.
/// @type Number
$offcanvas-transition-length: 0.5s;

/// Timing function of the animation on an off-canvas menu.
/// @type Keyword
$offcanvas-transition-timing: ease;

/// Background color for the overlay that appears when an off-canvas menu is open.
/// @type Color
$offcanvas-exit-background: rgba($white, 0.25);

/// CSS class used for the main content area. The off-canvas mixins use this to target the page body.
$maincontent-class: 'main-content';

/// Box shadow to place under the main content area. This shadow overlaps the off-canvas menus.
/// @type Shadow
$maincontent-shadow: 0 0 10px rgba($black, 0.5);

/// Adds baseline styles for off-canvas. This CSS is required to make the other pieces work.
@mixin off-canvas-basics {
  // Extra properties needed on <body> to make off-canvas work
  body {
    overflow-x: hidden;
    height: 100%;
  }

  // Click-to-exit overlay (generated by JavaScript)
  .js-off-canvas-exit {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: $offcanvas-exit-background;
    cursor: pointer;
    transition: background $offcanvas-transition-length $offcanvas-transition-timing;

    .is-off-canvas-open & {
      display: block;
    }
  }
}

/// Adds basic styles for an off-canvas menu.
@mixin off-canvas-base {
  position: if($offcanvas-fixed, fixed, absolute);
  background: $offcanvas-background;
  transition: transform $offcanvas-transition-length $offcanvas-transition-timing;
  z-index: $offcanvas-zindex;
  backface-visibility: hidden;

  &.is-open.is-open {
    transform: translate3d(0, 0, 0);
  }
}

@mixin off-canvas-position(
  $position: left,
  $size: $offcanvas-width,
  $fixed: false
) {
  $y: top;
  $x: left;
  $transform: translateX(-100%);

  @if $position == right {
    $x: right;
    $transform: translateX(100%);
  }
  @else if $position == top {
    $transform: translateY(-100%);
  }

  #{$y}: 0;
  #{$x}: 0;
  transform: $transform;
  
  @if $position == left or $position == right {
    width: $size;
    min-height: 100%;
  }
  @else {
    width: 100%;
    height: $size;
  }

  &.is-open ~ .#{$maincontent-class} {
    @if $position == left        { transform: translateX($size); }
    @else if $position == right  { transform: translateX(-$size); }
    @else if $position == top    { transform: translateY($size); }
  }
}

/// Adds styles for the main content wrapper that sits next to the off-canvas.
@mixin main-content {
  background: $body-background;
  transition: transform $offcanvas-transition-length $offcanvas-transition-timing;
  backface-visibility: hidden;

  @if hasvalue($maincontent-shadow) {
    box-shadow: $maincontent-shadow;
  }
}

/// Adds styles that reveal an off-canvas menu.
@mixin off-canvas-reveal {
  .off-canvas {
    transform: none;
    transition: none;
  }

  .main-content {
    padding-left: $offcanvas-width;
    transform: none;
  }
}

@mixin foundation-off-canvas {
  @include off-canvas-basics;

  // Off-canvas container
  .off-canvas {
    @include off-canvas-base;
    
    &.position-left   { @include off-canvas-position(left); }
    &.position-right  { @include off-canvas-position(right); }
    &.position-top    { @include off-canvas-position(top); }
  }

  // Container for page content
  .main-content {
    @include main-content;

    // Modifier class to make off-canvas overlap instead of push main content
    .off-canvas-overlap .is-off-canvas-open & {
      transform: none;
    }
  }

  // Reveal off-canvas menu on larger screens
  @each $name, $value in $breakpoint-classes {
    .reveal-for-#{$name} {
      @include breakpoint($name) {
        @include off-canvas-reveal;
      }
    }
  }
}
