// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group zf-grid
////

// Margin Grid classes
@mixin zf-base-grid-classes {

  // Grid Container
  .grid-container {
    @include zf-grid-container;
  }

  // Base grid styles
  .grid {
    @include zf-grid;
  }

  .cell {
    @include zf-cell-base();
  }

  .grid {
    > .auto {
      @include zf-cell-base(auto);
    }
    > .shrink {
      @include zf-cell-base(shrink);
    }

  }

  // Auto width
  @include -zf-each-breakpoint() {
    @if not($-zf-size == small) {
      .grid > .#{$-zf-size}-auto {
        @include zf-cell-base(auto);
      }

      .grid > .#{$-zf-size}-shrink {
        @include zf-cell-base(shrink);
      }
    }

    @for $i from 1 through $grid-columns {
      // Sizing (percentage)
      .#{$-zf-size}-#{$i} {
        @include zf-cell-nonresponsive($i, false);
      }
    }
  }
}

// Margin Grid classes
@mixin zf-margin-grid-classes(
  $gutter-position: left right,
  $vertical: false,
  $wrapping-selector: '.margin-gutters'
){
  #{$wrapping-selector} {
    @include zf-gutters($negative: true, $gutter-position: $gutter-position);

    // Base cell styles
    > .cell {
      @include zf-cell-nonresponsive($vertical: $vertical);
    }

    // Auto width
    @include -zf-each-breakpoint(false) {
      @if(typeof($grid-margin-gutters) == 'map' and map-has-key($grid-margin-gutters, $-zf-size)) {
        > .cell {
          @include zf-cell-nonresponsive($breakpoint: $-zf-size, $vertical: $vertical);
        }
        > .auto {
          @include zf-cell-nonresponsive(auto, false, $breakpoint: $-zf-size, $vertical: $vertical);
        }
        > .shrink {
          @include zf-cell-nonresponsive(shrink, false, $breakpoint: $-zf-size, $vertical: $vertical);
        }
      }
      > .#{$-zf-size}-auto {
        @include zf-cell-nonresponsive(auto, false, $breakpoint: $-zf-size, $vertical: $vertical);
      }
      > .#{$-zf-size}-shrink {
        @include zf-cell-nonresponsive(shrink, false, $breakpoint: $-zf-size, $vertical: $vertical);
      }

      @for $i from 1 through $grid-columns {
        // Sizing (percentage)
        > .#{$-zf-size}-#{$i} {
          @include zf-cell-nonresponsive($i, false, $breakpoint: $-zf-size, $vertical: $vertical);
        }
      }
      @if(typeof($grid-margin-gutters) == 'map' and map-has-key($grid-margin-gutters, $-zf-size)) {
        @each $bp in -zf-breakpoints-less-than($-zf-size) {
          @if(map-has-key($grid-margin-gutters, $bp)) {
            > .#{$bp}-auto {
              @include zf-cell-nonresponsive(auto, false, $breakpoint: $bp, $vertical: $vertical);
            }
            > .#{$bp}-shrink {
              @include zf-cell-nonresponsive(shrink, false, $breakpoint: $bp, $vertical: $vertical);
            }
            @for $i from 1 through $grid-columns {
              // Sizing (percentage)
              > .#{$bp}-#{$i} {
                @include zf-cell-nonresponsive($i, false, $breakpoint: $bp, $vertical: $vertical);
              }
            }
          }
        }
      }

      @for $i from 1 through $grid-columns {
        // Sizing (percentage)
        > .#{$-zf-size}-#{$i} {
          @include zf-cell-nonresponsive($i, false, $breakpoint: $-zf-size, $vertical: $vertical);
        }
      }
    }
  }
}

// Padding Grid classes
@mixin zf-padding-grid-classes {
  .padding-gutters {

    // Negative margin for nested grids
    .padding-gutters {
      @include zf-gutters($negative: true);
    }

    // Base cell styles
    > .cell {
      @include zf-gutters($gutters: $grid-padding-gutters, $gutter-type: padding);
    }
  }
}

// Collapse classes
@mixin zf-collapse-grid-classes {
  @include -zf-each-breakpoint {
    .#{$-zf-size}-margin-collapse {
      @include zf-grid-collapse($gutter-type: margin);
    }

    .#{$-zf-size}-padding-collapse {
      @include zf-grid-collapse($gutter-type: padding);
    }
  }
}

// Offset classes
@mixin zf-offset-cell-classes {
  @include -zf-each-breakpoint {
    @for $i from 1 through $grid-columns {
      // Offsets
      $o: $i - 1;

      .margin-gutters > .#{$-zf-size}-offset-#{$o} {
        @include zf-cell-offset($o, $breakpoint: $-zf-size);
      }

      .padding-gutters > .#{$-zf-size}-offset-#{$o} {
        @include zf-cell-offset($o, $gutters: $grid-padding-gutters, $gutter-type: padding, $breakpoint: $-zf-size);
      }
    }
  }
}

// Vertical Grid classes
@mixin zf-vertical-grid-classes(
  $margin-grid: true,
  $padding-grid: true
) {
  .grid-vertical {
    @include zf-grid(vertical);
    > .cell {
      @include zf-cell-reset()
    }
    @include -zf-each-breakpoint() {
      @if(typeof($grid-margin-gutters) == 'map' and map-has-key($grid-margin-gutters, $-zf-size)) {
        > .cell {
          @include zf-cell-nonresponsive($breakpoint: $-zf-size, $vertical: true);
        }
        > .auto {
          @include zf-cell-nonresponsive(auto, false, $breakpoint: $-zf-size, $vertical: true);
        }
        > .shrink {
          @include zf-cell-nonresponsive(shrink, false, $breakpoint: $-zf-size, $vertical: true);
        }
      }
      @for $i from 1 through $grid-columns {
        // Sizing (percentage)
        .#{$-zf-size}-#{$i} {
          @include zf-cell-nonresponsive($i, false, $vertical: true);
        }
      }
    }
  }
  @include zf-margin-grid-classes(top bottom, true, '.grid-vertical.margin-gutters')

}

// Final classes
@mixin foundation-zf-grid-classes(
  $base-grid: true,
  $margin-grid: true,
  $padding-grid: true,
  $vertical-grid: false,
  $collapse: true,
  $offset: true
) {

  // Base grid styles
  @if($base-grid) {
    @include zf-base-grid-classes();
  }

  // Margin grid
  @if($margin-grid) {
    @include zf-margin-grid-classes();
  }

  // Padding grid
  @if($padding-grid) {
    @include zf-padding-grid-classes();
  }

  // Vertical grid
  @if($vertical-grid) {
    @include zf-vertical-grid-classes($margin-grid, $padding-grid);
  }

  // Collapse gutters
  @if($collapse) {
    @include zf-collapse-grid-classes();
  }

  // Offset gutters
  @if($offset) {
    @include zf-offset-cell-classes();
  }
}
