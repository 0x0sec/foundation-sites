// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group zf-grid
////

// Margin Grid classes
@mixin zf-base-grid-classes {

  // Grid Container
  .grid-container {
    @include zf-grid-container;
  }

  // Base grid styles
  .grid {
    @include zf-grid;
  }

  // Framed grid styles
  .grid-frame {
    @include zf-grid-frame;
  }

  .cell {
    @include zf-cell-base();
    @include zf-cell-static($grid-columns, false, $gutter-type: padding);
  }

  .cell-block {
    @include zf-cell-block();
  }

  .cell-block-container {
    @include zf-cell-block-container();
  }

  .grid {
    > .auto {
      @include zf-cell-base(auto);
    }

    > .shrink {
      @include zf-cell-base(shrink);
    }
  }

  // Auto width
  @include -zf-each-breakpoint() {
    @if not($-zf-size == small) {
      .grid > .#{$-zf-size}-auto {
        @include zf-cell-base(auto);
      }

      .grid > .#{$-zf-size}-shrink {
        @include zf-cell-base(shrink);
      }

      &.#{$-zf-size}-grid-frame {
        width: auto;
        @include zf-grid-frame(true);
      }
      .#{$-zf-size}-cell-block {
        @include zf-cell-block();
      }
    }

    @for $i from 1 through $grid-columns {
      // Sizing (percentage)
      .#{$-zf-size}-#{$i} {
        @include zf-cell-static($i, false, $gutter-type: padding);
      }
    }
  }
}

@mixin -zf-breakpoint-cell-classes($breakpoint, $vertical) {
  $prefix: if($breakpoint == $-zf-zero-breakpoint, '', '#{$breakpoint}-');
  > .#{$prefix}auto {
    @include zf-cell-static(auto, false, $breakpoint: $breakpoint, $vertical: $vertical);
  }

  > .#{$prefix}shrink {
    @include zf-cell-static(shrink, false, $breakpoint: $breakpoint, $vertical: $vertical);
  }

  @for $i from 1 through $grid-columns {
    // Sizing (percentage)
    $classname: if($vertical, '.#{$breakpoint}-vertical-#{$i}', '.#{$breakpoint}-#{$i}');

    > #{$classname} {
      @include zf-cell-static($i, false, $breakpoint: $breakpoint, $vertical: $vertical);
    }
  }
}

// Margin Grid classes
@mixin zf-margin-grid-classes(
  $gutter-position: left right,
  $vertical: false,
  $wrapping-selector: '.margin-gutters'
){
  #{$wrapping-selector} {
    @include zf-gutters($negative: true, $gutter-position: $gutter-position);

    // Base cell styles
    > .cell {
      @include zf-cell-static($vertical: $vertical);
    }

    // base styles need to all be before the auto and shrink styles
    @include -zf-each-breakpoint() {
      @if(type-of($grid-margin-gutters) == 'map' and map-has-key($grid-margin-gutters, $-zf-size) and $-zf-size != $-zf-zero-breakpoint) {
        > .cell {
          @include zf-cell-static($breakpoint: $-zf-size, $vertical: $vertical);
        }
      }
    }

    @include -zf-each-breakpoint() {
      @include -zf-breakpoint-cell-classes($-zf-size, $vertical);

      // This is purely for responsive gutters - the margin grid has to go back and adjust widths (or heights)
      // for prior breakpoints based on the responsive gutter.
      @if(type-of($grid-margin-gutters) == 'map' and map-has-key($grid-margin-gutters, $-zf-size)) {
        @each $bp in -zf-breakpoints-less-than($-zf-size) {
          @if(map-has-key($grid-margin-gutters, $bp)) {
            @include -zf-breakpoint-cell-classes($bp, $vertical);
          }
        }
      }
    }
  }
}

// Padding Grid classes
@mixin zf-padding-grid-classes {
  .padding-gutters {

    // Negative margin for nested grids
    .padding-gutters {
      @include zf-gutters($negative: true);
    }

    // Base cell styles
    > .cell {
      @include zf-gutters($gutters: $grid-padding-gutters, $gutter-type: padding);
    }
  }
}

// Block Grid classes
@mixin zf-block-grid-classes($margin-grid: true, $padding-grid: true) {
  @if $margin-grid {
    @include -zf-each-breakpoint {
      @for $i from 1 through $block-grid-max {
        .#{$-zf-size}-margin-up-#{$i} {
          @include zf-grid-layout($i, '.cell', $gutter-type: margin);
        }
      }
    }
  }

  @if $padding-grid {
    @include -zf-each-breakpoint {
      @for $i from 1 through $block-grid-max {
        .#{$-zf-size}-padding-up-#{$i} {
          @include zf-grid-layout($i, '.cell', $gutter-type: padding);
        }
      }
    }
  }
}

// Collapse classes
@mixin zf-collapse-grid-classes($margin-grid: true, $padding-grid: true) {
  @include -zf-each-breakpoint {
    @if $margin-grid {
      .#{$-zf-size}-margin-collapse {
        @include zf-grid-collapse($gutter-type: margin);
      }
    }

    @if $padding-grid {
      .#{$-zf-size}-padding-collapse {
        @include zf-grid-collapse($gutter-type: padding);
      }
    }
  }
}

// Offset classes
@mixin zf-offset-cell-classes {
  @include -zf-each-breakpoint {
    @for $i from 1 through $grid-columns {
      // Offsets
      $o: $i - 1;

      .#{$-zf-size}-offset-#{$o} {
        @include zf-cell-offset($o, $gutters: $grid-padding-gutters, $gutter-type: padding, $breakpoint: $-zf-size);
      }

      .margin-gutters > .#{$-zf-size}-offset-#{$o} {
        @include zf-cell-offset($o, $breakpoint: $-zf-size);
      }
    }
  }
}

// Vertical Grid classes
@mixin zf-vertical-grid-classes(
  $margin-grid: true,
  $padding-grid: true
) {

  .cell-block-vertical {
    @include zf-cell-block(true);
  }

  @include -zf-each-breakpoint() {
    @if not($-zf-size == small) {
      .#{$-zf-size}-cell-block-vertical {
        @include zf-cell-block(true);
      }
    }
  }

  .grid-vertical {
    @include zf-grid(vertical);

    &.grid-frame {
      width: auto;
      @include zf-grid-frame(true);
    }


    > .cell {
      @include zf-cell-reset();
    }

    > .auto {
      @include zf-cell-static(auto, false, $breakpoint: $-zf-size, $vertical: true);
    }

    > .shrink {
      @include zf-cell-static(shrink, false, $breakpoint: $-zf-size, $vertical: true);
    }


    @include -zf-each-breakpoint() {
      @if not($-zf-size == small) {
        > .#{$-zf-size}-auto {
          @include zf-cell-static(auto, false, $breakpoint: $-zf-size, $vertical: true);
        }

        > .#{$-zf-size}-shrink {
          @include zf-cell-static(shrink, false, $breakpoint: $-zf-size, $vertical: true);
        }

        &.#{$-zf-size}-grid-frame {
          width: auto;
          @include zf-grid-frame(true);
        }
      }

      @for $i from 1 through $grid-columns {
        // Sizing (percentage)
        > .#{$-zf-size}-vertical-#{$i} {
          @include zf-cell-static($i, false, $vertical: true, $gutter-type: padding);
        }
      }
    }

    @if $padding-grid {
      &.padding-gutters {
        // Negative margin for nested grids
        .padding-gutters {
          @include zf-gutters($negative: true, $gutter-position: top bottom);
        }

        // Base cell styles
        > .cell {
          @include zf-gutters($gutters: $grid-padding-gutters, $gutter-type: padding, $gutter-position: top bottom);
        }
      }
    }
  }

  @if $margin-grid {
    @include zf-margin-grid-classes(top bottom, true, '.grid-vertical.margin-gutters')
  }
}

// Final classes
@mixin foundation-zf-grid-classes(
  $base-grid: true,
  $margin-grid: true,
  $padding-grid: true,
  $block-grid: true,
  $collapse: true,
  $offset: true,
  $vertical-grid: true
) {

  // Base grid styles
  @if($base-grid) {
    @include zf-base-grid-classes();
  }

  // Margin grid
  @if($margin-grid) {
    @include zf-margin-grid-classes();
  }

  // Padding grid
  @if($padding-grid) {
    @include zf-padding-grid-classes();
  }

  // Block grid
  @if($block-grid) {
    @include zf-block-grid-classes($margin-grid, $padding-grid);
  }

  // Collapse gutters
  @if($collapse) {
    @include zf-collapse-grid-classes($margin-grid, $padding-grid);
  }

  // Offset gutters
  @if($offset) {
    @include zf-offset-cell-classes();
  }

  // Vertical grid
  @if($vertical-grid) {
    @include zf-vertical-grid-classes($margin-grid, $padding-grid);
  }
}
