// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group zf-grid
////

/// Calculate the percentage size of a cell.
///
/// @param {Number|List} $size [$grid-columns] - Size to make the cell. You can pass a value in multiple formats, such as `6`, `50%`, `1 of 2 or 1/3.
@function zf-cell-size(
  $size: $grid-columns
) {
  // Parsing percents, decimals, n of n and number counts
  @if type-of($size) == 'number' {
    @if unit($size) == '%' {
      $size: $size;
    }
    @else if $size < 1 {
      $size: percentage($size);
    }
    @else {
      $size: percentage($size / $grid-columns);
    }
  }

  // Parsing "n of n" or "n/n" expressions
  @elseif type-of($size) == 'list' {
    @if length($size) != 3 {
      @error 'Wrong syntax for zf-cell-size(). Use the format "n of n" or "n/n".';
    }
    @else {
      $size: percentage(nth($size, 1) / nth($size, 3));
    }
  }
  // Anything else is incorrect
  @else {
    @error 'Wrong syntax for zf-cell-size(). Use a number, decimal, percentage, or "n of n" / "n/n".';
  }

  @return $size;
}

@mixin zf-cell-base($size: full) {
  @if($size == 'full') {
    // This is the base style, all others inherit from it
    flex: 0 0 auto;
  }
  @elseif ($size == 'auto') {
    flex: 1 1 auto;
  }
  @elseif ($size == 'shrink') {
    flex: 0 0 auto;
  }
}

@mixin zf-cell-reset($vertical: true) {
  $direction: if($vertical == true, width, height);
  $sides: if($vertical == true, left right, top bottom);
  #{$direction}: auto;
  @each $side in $sides {
    margin-#{$side}: 0;
    padding-#{$side}: 0;
  }
}

@mixin -zf-cell-properties($size, $margin-gutter, $vertical) {
  $direction: if($vertical == true, height, width);
  @if($size == 'full') {
    $val: if($margin-gutter == 0, 100%, calc(100% - #{rem-calc($margin-gutter)}));
    #{$direction}: $val;
  }
  @elseif ($size == 'auto') {
    #{$direction}: auto;
    $val: if($margin-gutter == 0, 100%, calc(100% - #{rem-calc($margin-gutter)}));
  }
  @elseif ($size == 'shrink') {
    #{$direction}: auto;
  }
  @else {
    $val: if($margin-gutter == 0, #{zf-cell-size($size)}, calc(#{zf-cell-size($size)} - #{rem-calc($margin-gutter)}));
    #{$direction}: $val;
  }
}


/// Creates a cell for your grid.
///
/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (default) for 100% width, `auto` to use up available space and `shrink` to use up only required space.
/// @param {Boolean} $gutter-output [true] - Output out gutters or not. Set to false when using with breakpoints when the base styles have already been set.
/// @param {Number|Map} $margin [$grid-margin-gutters] - Map or single value for margin gutters.
/// @param {Number|Map} $padding [$grid-padding-gutters] - Map or single value for padding gutters.
/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.
/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.
@mixin zf-cell(
  $size: full,
  $gutters: $grid-margin-gutters,
  $gutter-type: margin,
  $gutter-position: right left,
  $vertical: false
) {
  $breakpoint: null;

  @if($breakpoint == null) {
    // If `$bp-size` is available then use this, otherwise revert to the smallest bp.
    @if(variable-exists(-zf-size) and type-of($-zf-size) != 'number') {
      $breakpoint: $-zf-size;
    }
    @else {
      $breakpoint: $-zf-zero-breakpoint;
    }
  }

  // Get our gutters from map if available, if not map just return the value.
  $gutter: -zf-get-bp-val($gutters, $breakpoint);

  // Base flex properties
  @include zf-cell-base($size);

  @if($gutter-type == 'margin') {
    @include -zf-cell-properties($size, $gutter, $vertical);
  }
  @else {
    @include -zf-cell-properties($size, 0, $vertical);
  }

  // If gutters = map
  @if(type-of($gutters) == 'map') {
    // If $gutters map has a key = $breakpoint, output the value
    @if (map-has-key($gutters, $breakpoint)) {
      @include zf-gutters($gutter, $gutter-type, $gutter-position);
    }
  }
  // If not a map
  @else {
    @include zf-gutters($gutter, $gutter-type, $gutter-position);
  }
}

@mixin zf-cell-static(
  $size: full,
  $gutter-output: true,
  $gutters: $grid-margin-gutters,
  $breakpoint: $-zf-zero-breakpoint,
  $gutter-type: margin,
  $vertical: false) {

  $gutter: -zf-get-bp-val($gutters, $breakpoint);
  $gutter-position: if($vertical == true, top bottom, left right);

  @if($gutter-type == 'margin') {
    @include -zf-cell-properties($size, $gutter, $vertical);
  }
  @else {
    @include -zf-cell-properties($size, 0, $vertical);
  }

  // If we want to output the gutters
  @if($gutter-output) {
    // TODO: Figure out if we need to pass breakpoint in here too.
    @include zf-gutters($gutter, $gutter-type, $gutter-position);
  }
}

/// Modifies a cell to give it "block" behavior (overflow auto, inertial scrolling)
///
/// @param {Boolean} $vertical [false] - Is grid vertical or horizontal. Should match grid.
@mixin zf-cell-block(
  $vertical: false
) {
  $property: if($vertical == true, 'overflow-y', 'overflow-x');

  #{$property}: auto;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-stype: -ms-autohiding-scrollbar;
}
