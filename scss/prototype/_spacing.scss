// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group prototype-spacing
////

/// Responsive breakpoints for spacing classes (margin and padding)
/// @type Boolean
$prototype-spacing-breakpoints: $global-prototype-breakpoints !default;

/// Default number of spacers count (margin and padding)
/// @type Number
$prototype-spacers-count: 3 !default;

/// Margin helper mixin, all the values are multiplied by `$global-margin` which by default is equal to `1rem`
/// @param {Number} $top [null] - Margin Top
/// @param {Number} $right [null] - Margin Right
/// @param {Number} $bottom [null] - Margin Bottom
/// @param {Number} $left [null] - Margin Left
@mixin margin(
  $top: null,
  $right: null,
  $bottom: null,
  $left: null
) {
  @if $top != null {
    margin-top: $top * $global-margin !important;
  }
  @if $right != null {
    margin-right: $right * $global-margin !important;
  }
  @if $bottom != null {
    margin-bottom: $bottom * $global-margin !important;
  }
  @if $left != null {
    margin-left: $left * $global-margin !important;
  }
}

/// Padding helper mixin, all the values are multiplied by `$global-padding` which by default is equal to `1rem`
/// @param {Number} $top [null] - Padding Top
/// @param {Number} $right [null] - Padding Right
/// @param {Number} $bottom [null] - Padding Bottom
/// @param {Number} $left [null] - Padding Left
@mixin padding(
  $top: null,
  $right: null,
  $bottom: null,
  $left: null
) {
  @if $top != null {
    padding-top: $top * $global-padding !important;
  }
  @if $right != null {
    padding-right: $right * $global-padding !important;
  }
  @if $bottom != null {
    padding-bottom: $bottom * $global-padding !important;
  }
  @if $left != null {
    padding-left: $left * $global-padding !important;
  }
}

@mixin foundation-prototype-spacing {
  @for $spacer from 0 through $prototype-spacers-count {
    
    @each $prop in (margin, padding) {
      // All Sides
      .#{$prop}-#{$spacer} {
        @if ($prop == margin) { @include margin($spacer, $spacer, $spacer, $spacer); }
        @else if ($prop == padding) { @include padding($spacer, $spacer, $spacer, $spacer); }
      }

      // Top Side
      .#{$prop}-top-#{$spacer} {
        @if ($prop == margin) { @include margin($spacer, null, null, null); }
        @else if ($prop == padding) { @include padding($spacer, null, null, null); }
      }

      // Right Side
      .#{$prop}-right-#{$spacer} {
        @if ($prop == margin) { @include margin(null, $spacer, null, null); }
        @else if ($prop == padding) { @include padding(null, $spacer, null, null); }
      }

      // Bottom Side
      .#{$prop}-bottom-#{$spacer} {
        @if ($prop == margin) { @include margin(null, null, $spacer, null); }
        @else if ($prop == padding) { @include padding(null, $spacer, null, null); }
      }

      // Left Side
      .#{$prop}-left-#{$spacer} {
        @if ($prop == margin) { @include margin(null, null, null, $spacer); }
        @else if ($prop == padding) { @include padding(null, null, null, $spacer); }
      }

      // Horizontal Axes
      .#{$prop}-horizontal-#{$spacer} {
        @if ($prop == margin) { @include margin(null, $spacer, null, $spacer); }
        @else if ($prop == padding) { @include padding(null, $spacer, null, $spacer); }
      }

      // Vertical Axes
      .#{$prop}-vertical-#{$spacer} {
        @if ($prop == margin) { @include margin($spacer, null, $spacer, null); }
        @else if ($prop == padding) { @include padding($spacer, null, $spacer, null); }
      }
    }

    @if ($prototype-spacing-breakpoints) {
    // Loop through Responsive Breakpoints
      @each $size in $breakpoint-classes {
        @include breakpoint($size) {
          @if $size != $-zf-zero-breakpoint {
            .#{$size} {
              @each $prop in (margin, padding) {
                // All Sides
                &-#{$prop}-#{$spacer} {
                  @if ($prop == margin) { @include margin($spacer, $spacer, $spacer, $spacer); }
                  @else if ($prop == padding) { @include padding($spacer, $spacer, $spacer, $spacer); }
                }

                // Top Side
                &-#{$prop}-top-#{$spacer} {
                  @if ($prop == margin) { @include margin($spacer, null, null, null); }
                  @else if ($prop == padding) { @include padding($spacer, null, null, null); }
                }

                // Right Side
                &-#{$prop}-right-#{$spacer} {
                  @if ($prop == margin) { @include margin(null, $spacer, null, null); }
                  @else if ($prop == padding) { @include padding(null, $spacer, null, null); }
                }

                // Bottom Side
                &-#{$prop}-bottom-#{$spacer} {
                  @if ($prop == margin) { @include margin(null, null, $spacer, null); }
                  @else if ($prop == padding) { @include padding(null, $spacer, null, null); }
                }

                // Left Side
                &-#{$prop}-left-#{$spacer} {
                  @if ($prop == margin) { @include margin(null, null, null, $spacer); }
                  @else if ($prop == padding) { @include padding(null, null, null, $spacer); }
                }

                // Horizontal Axes
                &-#{$prop}-horizontal-#{$spacer} {
                  @if ($prop == margin) { @include margin(null, $spacer, null, $spacer); }
                  @else if ($prop == padding) { @include padding(null, $spacer, null, $spacer); }
                }

                // Vertical Axes
                &-#{$prop}-vertical-#{$spacer} {
                  @if ($prop == margin) { @include margin($spacer, null, $spacer, null); }
                  @else if ($prop == padding) { @include padding($spacer, null, $spacer, null); }
                }
              }
            }
          }
        }
      }
    }
  }
}
