////
/// @group functions
////

// scss-lint:disable ZeroUnit

/// Defines the base font size of the page, which is the value `1rem` is equal to.
/// @type Number
$rem-base: 16px !default;

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
/// @param {Number} $num - Number to strip unit from.
/// @returns {Number} The same number, sans unit.
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/// Converts a turn unit to the equivalent unit in degrees. `1turn` is equal to `360deg`. Not all browsers support turn, so this function allows us to use turns while outputting a value that all browsers understand.
/// @param {Number} $value - Turn value to convert.
/// @returns {Number} The same value, but in degrees.
@function turn-to-deg($value) {
  @return strip-unit($value) * 360deg;
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$rem-base` variable.
/// @param {Number} $value - Pixel value to convert.
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value.
@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

/// Converts one or more pixel values into matching rem values. This function works a lot like `convert-to-rem`, except it can convert more than one value at once, which is useful when setting multiple values on a `margin` or `padding` property.
/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @returns {List} A list of converted values.
@function rem-calc($values, $base-value: null) {
  $rem-values: ();
  $max: length($values);

  @if $base-value == null {
    $base-value: $rem-base;
  }

  @if $max == 1 {
    @return convert-to-rem($values, $base-value);
  }

  @for $i from 1 through $max {
    $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
  }
  
  @return $rem-values;
}
