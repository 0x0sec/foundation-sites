// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group grid
////
$grid-container: 1200px !default;
$grid-columns: 12 !default;
$grid-type: padding !default;
$grid-gutters: (
  small: 20px,
  medium: 30px
) !default;
$grid-debug: false !default;

/// Calculate the percentage size of a cell.
///
/// @param {Number|List} $size [$grid-columns] - Size to make the cell. You can pass a value in multiple formats, such as `6`, `50%`, `1 of 2 or 1/3.
@function zf-cell-size(
  $size: $grid-columns
) {
    // Parsing percents, decimals, n of n and number counts
    @if type-of($size) == 'number' {
        @if unit($size) == '%' {
            $size: $size;
        }
        @else if $size < 1 {
            $size: percentage($size);
        }
        @else {
            $size: percentage($size / $grid-columns);
        }
    }

    // Parsing "n of n" or "n/n" expressions
    @else if type-of($size) == 'list' {
        @if length($size) != 3 {
            @error 'Wrong syntax for zf-cell-size(). Use the format "n of n" or "n/n".';
        }
        @else {
            $size: percentage(nth($size, 1) / nth($size, 3));
        }
    }

    // Anything else is incorrect
    @else {
        @error 'Wrong syntax for zf-cell-size(). Use a number, decimal, percentage, or "n of n" / "n/n".';
    }

    @return $size;
}

/// Create gutters for a cell/container. 
///
/// @param {Number|Map} $gutters [$grid-gutters] - Map or single value for gutters size.
/// @param {Keyword} $type [$grid-type] - The type of gutter to apply. Accepts either `padding` or `margin`.
/// @param {Keyword|List} $position [horizontal] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination, `block` (a quick way to say left right bottom) or `all` (for all 4 sides). Also accepts `negative` to output gutters as a negative value (only works with margins).
/// @param {Boolean} $negative [false] - Whether to apply the gutter as a negative value. Commonly used for nexted grids.
@mixin zf-gutters(
  $gutters: auto,
  $type: $grid-type,
  $position: horizontal,
  $negative: false
) {
  $format: if($negative, '-', '');
  
  // If we have declared negative gutters, force type to `margin.
  $type: if($negative, 'margin', $type);

  // Declare our gutter positions.
  $gutter-output: '';

  @if ($position == 'horizontal') {
    $gutter-output: right left;
  }
  @elseif ($position == 'vertical') {
    $gutter-output: top bottom;
  }
  @elseif ($position == 'block') {
    $gutter-output: top bottom left;
  }
  @else {
    $gutter-output: $position;
  }
  
  // Output our gutters.
  @if ($gutters == 'auto') {
    @include -zf-breakpoint-value($gutters, $grid-gutters) {
      $gutter: rem-calc($-zf-bp-value) / 2;

      // If position is set to `all` apply our gutter to all sides
      @if index($position, all) != null {
        #{$type}: #{$format}$gutter;
      }
      @else {
        // Loop through each gutter position
        @each $value in $gutter-output {
          #{$type}-#{$value}: #{$format}$gutter;
        }
      }
    }
  }
  @else {
    $gutter: rem-calc($gutters) / 2;

    // Loop through each gutter position
    @each $value in $gutter-output {
      #{$type}-#{$value}: #{$format}$gutter;
    }
  }
}

/// Creates a max width container, designed to house your grid content.
///
/// @param {Number} $width [$grid-container] - a width to limit the container to.
@mixin zf-grid-container(
  $width: $grid-container
) {
  max-width: rem-calc($width);
  margin: 0 auto;
}

/// Creates a container for your flex cells. 
///
/// @param {Keyword} $direction [horizontal] - Either horizontal or vertical direction of cells within.
/// @param {Boolean} $wrap [true] - If the cells within should wrap or not.
@mixin zf-grid(
  $direction: horizontal,
  $wrap: true
) {
  $direction: if($direction == 'horizontal', row, column);
  $wrap: if($wrap, wrap, nowrap);

  display: flex;
  flex-flow: $direction $wrap;
}

/// Creates a cell for your grid. 
///
/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (default) for 100% width, `auto` to use up available space and `shrink` to use up only required space.
/// @param {Keyword} $direction [horizontal] - Either horizontal or vertical direction - used to apply gutters in the right place.
@mixin zf-cell-size(
  $size: full,
  $type: $grid-type,
  $direction: horizontal
) {
  // Set either width or height depending on axis
  $direction: if($direction == 'horizontal', width, height);

  // Sizing properties
  @if($size == 'full') {
    @if($type == 'margin') {
      @include -zf-breakpoint-value(auto, $grid-gutters) {
        $gutter: rem-calc($-zf-bp-value);
        flex: 1 1 calc(100% - #{$gutter});
      }
    }
    @else {
      flex: 1 1 100%;
    }
  }
  @elseif($size == 'auto') {
    flex: 1 1 0px; // sass-lint:disable-line zero-unit - https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored
  }
  @elseif($size == 'shrink') {
    flex: 0 0 auto;

    @if($type == 'margin') {
      @include -zf-breakpoint-value(auto, $grid-gutters) {
        $gutter: rem-calc($-zf-bp-value);
        max-#{$direction}: calc(100% - #{$gutter});
      }
    }
    @else {
      max-#{$direction}: 100%;
    }
  }
  @else {
    @if($type == 'margin') {
      @include -zf-breakpoint-value(auto, $grid-gutters) {
        $gutter: rem-calc($-zf-bp-value);
        flex: 0 0 calc(#{zf-cell-size($size)} - #{$gutter});
        max-#{$direction}: calc(#{zf-cell-size($size)} - #{$gutter});
      }
    }
    @else {
      flex: 0 0 $size;
      max-#{$direction}: zf-cell-size($size);
    }
  }
}

/// Creates a cell for your grid. 
///
/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (default) for 100% width, `auto` to use up available space and `shrink` to use up only required space.
/// @param {Number|Map} $gutters [$grid-gutters] - Map or single value for gutters size.
/// @param {Keyword} $type [$grid-type] - The type of gutter to apply. Accepts either `padding` or `margin`.
/// @param {Keyword} $direction [horizontal] - Either horizontal or vertical direction - used to apply gutters in the right place.
@mixin zf-cell(
  $size: full,
  $gutters: auto,
  $position: horizontal,
  $type: $grid-type,
  $direction: horizontal
) {
  // Sizing
  @include zf-cell-size($size: $size, $direction: $direction);

  // Gutters
  @if($gutters) {
    @include zf-gutters($gutters: $gutters, $type: $type, $position: $position);
  }
}

// Final classes
@mixin zf-grid-classes() {

  // Grid Container
  .grid-container {
    @include zf-grid-container;
  }

  // Default Grid
  .grid {
    @include zf-grid;

    // Negative margins for margin grid.
    @if ($grid-type == 'margin') {
      @include zf-gutters($negative: true);
    }

    // Negative nested margin for padding grid.
    @if ($grid-type == 'padding') {
      .grid {
        @include zf-gutters($negative: true);
      }
    }
  }

  // Vertical grid.
  .grid-vertical {
    @include zf-grid(vertical, false);

    // Cells
    .cell {
      @include zf-cell($position: vertical);
      #{$grid-type}-right: 0;
      #{$grid-type}-left: 0;
      max-width: 100%;
    }

    @include -zf-each-breakpoint {
      @for $i from 1 through $grid-columns {
        // Sizing (percentage)
        .#{$-zf-size}-#{$i} {
          @include zf-cell($i, $direction: vertical, $gutters: false);
        }
      }
    }
  }

  // Collapse gutters.
  .grid-collapse {
    > .cell {
      #{$grid-type}-right: 0;
      #{$grid-type}-left: 0;
    }
  }

  
  // Collapse vertical gutters.
  .grid-vertical-collapse {
    > .cell {
      #{$grid-type}-top: 0;
      #{$grid-type}-bottom: 0;
    }
  }

  // Grid shrink classes
  .grid-shrink {
    > .cell {
      @include zf-cell(shrink, false);
    }
  }

  // Grid auto classes
  .grid-auto {
    > .cell {
      @include zf-cell(auto, false);
    }
  }

  @include -zf-each-breakpoint($small: false) {
    // Responsive collapse classes
    .#{$-zf-size}-grid-collapse {
      > .cell {
        #{$grid-type}-right: 0;
        #{$grid-type}-left: 0;
      }
    }

    // Responsive vertical collapse classes
    .#{$-zf-size}-grid-vertical-collapse {
      > .cell {
        #{$grid-type}-top: 0;
        #{$grid-type}-bottom: 0;
      }
    }

    // Responsive grid shrink classes
    .#{$-zf-size}-grid-shrink {
      > .cell {
        @include zf-cell(shrink, false);
      }
    }

    // Responsive grid auto classes
    .#{$-zf-size}-grid-auto {
      > .cell {
        @include zf-cell(auto, false);
      }
    }
  }

  // Cells
  .cell {
    @include zf-cell;
  }

  // Shrink
  .shrink {
    @include zf-cell(shrink, false);
  }

  // Auto
  .auto {
    @include zf-cell(auto, false);
  }

  @include -zf-each-breakpoint($small: false) {
    // Responsive shrink sizes
    .#{$-zf-size}-shrink {
      @include zf-cell(shrink, false);
    }

    // Responsive auto sizes
    .#{$-zf-size}-auto {
      @include zf-cell(auto, false);
    }
  }

  @include -zf-each-breakpoint {
    @for $i from 1 through $grid-columns {
      // Sizing (percentage)
      .#{$-zf-size}-#{$i} {
        @include zf-cell($i, $gutters: false);
      }
    }
  }
}
