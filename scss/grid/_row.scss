////
/// @group grid
////

/// Change the behavior of columns defined inside this mixin to use a different column count.
///
/// @param {number} $columns - Number of columns to use.
/// @param {booleam} $root
///   If `false`, selectors inside this mixin will nest inside the parent selector.
///   If `tru`, selectors will not nest.
@mixin grid-context($columns, $root: false) {
  // Store the current column count so it can be re-set later
  $old-grid-column-count: $columns;
  $grid-column-count: $columns !global;
  @if $root {
    @at-root { @content; }
  }
  @else { @content; }
  // Restore the old column count
  $grid-column-count: $old-grid-column-count !global;
}

/// Creates a grid row.
///
/// @param {keyword|list} $behavior
///   Modifications to the default grid styles. `nest` indicates the row will be placed inside another row. `collapse` indicates that the columns inside this row will not have padding. `nest collapse` combines both behaviors.
/// @param {number} $width - Maximum width of the row.
/// @param {number} $columns - Column count for this row.
@mixin grid-row($behavior: null, $width: $grid-row-width, $columns: null, $root: false, $cf: true) {
  $behavior: -zf-get-options($behavior, nest collapse);
  $margin: auto;
  
  @if map-get($behavior, nest) {
    $margin: -$grid-column-gutter;
  }
  @else {
    max-width: $width;
  }

  margin: {
    left: $margin;
    right: $margin;
  };
  
  @if $columns != null {
    @include grid-context($columns, $root) {
      @content;
    }
  }

  @if $cf {
    @include clearfix;
  }
}
